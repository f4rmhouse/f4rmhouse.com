import Image from "next/image";
import Link from "next/link";
import { ThemeToggle } from "../../components/ThemeToggle";
import DocsSidebar from "../../components/DocsSidebar";
import CodeBlock from "../../components/CodeBlock";


export default function Home() {
  return (
    <div className="min-h-screen text-foreground bg-background">
      <nav className="fixed p-0 m-0 w-full backdrop-blur-xl bg-background/70 top-0 z-50 border-b border-[#86868b]/10">
        <div className="max-w-[980px] mx-auto px-5">
          <div className="flex justify-between items-center h-12">
            {/* Logo */}
            <Link href="/" className="flex items-center">
              <Image
                src="https://f4-public.s3.eu-central-1.amazonaws.com/public/assets/f4-logo-white.png"
                alt="f4rmhouse logo"
                width={24}
                height={24}
                priority
                className="rounded-full"
              />
              <p className="text-sm font-medium tracking-tight pl-2">f4rmhouse</p>
            </Link>

            {/* Right side navigation items */}
            <div className="flex items-center gap-4">
              <ThemeToggle />
              <Link
                href="/docs"
                className="text-sm hover:brightness-110 transition-all mr-4"
              >
                Docs
              </Link>
              <a
                href="https://app.f4rmhouse.com"
                className="text-sm text-accent hover:brightness-110 transition-all"
              >
                Launch App â†’
              </a>
            </div>
          </div>
        </div>
      </nav>

      <div className="flex pt-12">
        {/* Sidebar Navigation */}
        <DocsSidebar currentPage="artifacts" />

        {/* Main Content */}
        <main className="flex-1 ml-64 p-8 pt-20">
          <div className="max-w-3xl mx-auto">
            
            <div className="mb-12">
              <h1 className="text-3xl font-bold mb-4" id="overview">Artifacts & Artifact Extensions</h1>
              <p className="mb-6">Learn how to work with artifacts in f4rmhouse and extend their functionality</p>
              
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800 mb-8">
                <p className="text-sm">This guide covers the core concepts of artifacts in f4rmhouse, how they're created, managed, and extended.</p>
              </div>
            </div>

            <section className="mb-12" id="what-are-artifacts">
              <h2 className="text-2xl font-bold mb-4 pb-2 border-b border-[#86868b]/10">What Are Artifacts?</h2>
              <p className="mb-4">Artifacts are the outputs generated by f4rmhouse agents during their execution. They can be:</p>
              
              <ul className="list-disc pl-6 space-y-2 mb-6">
                <li><strong>Text documents</strong> - Reports, summaries, or analysis</li>
                <li><strong>Code</strong> - Source code, scripts, or configuration files</li>
                <li><strong>Data</strong> - Structured data like JSON, CSV, or other formats</li>
                <li><strong>Media</strong> - Images, audio, or other media files</li>
              </ul>
              
              <p className="mb-4">Artifacts serve as the tangible results of agent work and can be used as inputs for other agents or shared with users.</p>
            </section>

            <section className="mb-12" id="artifact-lifecycle">
              <h2 className="text-2xl font-bold mb-4 pb-2 border-b border-[#86868b]/10">Artifact Lifecycle</h2>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Creation</h3>
                <p className="mb-4">Artifacts are created when an agent completes a task or reaches a milestone in its execution:</p>
                <CodeBlock isMultiline={true}>{`// Example of artifact creation in agent code
const textArtifact = await agent.createArtifact({
  type: 'text',
  name: 'analysis-report',
  content: 'This is the analysis report content...',
  metadata: {
    author: 'Research Agent',
    version: '1.0'
  }
});`}</CodeBlock>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Storage</h3>
                <p className="mb-4">Artifacts are automatically stored in the f4rmhouse system and can be accessed through:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>The f4rmhouse dashboard</li>
                  <li>API calls to retrieve artifacts</li>
                  <li>Direct links to artifact resources</li>
                </ul>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Usage</h3>
                <p className="mb-4">Artifacts can be used in various ways:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>As inputs to other agents</li>
                  <li>For human review and feedback</li>
                  <li>As part of a larger workflow</li>
                  <li>For export and sharing</li>
                </ul>
              </div>
            </section>

            <section className="mb-12" id="artifact-types">
              <h2 className="text-2xl font-bold mb-4 pb-2 border-b border-[#86868b]/10">Artifact Types</h2>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Text Artifacts</h3>
                <p className="mb-4">Text artifacts are the most common type and can include:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>Plain text</li>
                  <li>Markdown</li>
                  <li>HTML</li>
                  <li>Other text-based formats</li>
                </ul>
                <CodeBlock isMultiline={true}>{`// Creating a markdown artifact
const markdownArtifact = await agent.createArtifact({
  type: 'text',
  format: 'markdown',
  name: 'project-readme',
  content: '# Project Overview\n\nThis document describes...',
});`}</CodeBlock>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Code Artifacts</h3>
                <p className="mb-4">Code artifacts represent source code or scripts:</p>
                <CodeBlock isMultiline={true}>{`// Creating a code artifact
const codeArtifact = await agent.createArtifact({
  type: 'code',
  language: 'javascript',
  name: 'data-processor.js',
  content: 'function processData(data) {\n  // Processing logic\n  return transformedData;\n}',
});`}</CodeBlock>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Data Artifacts</h3>
                <p className="mb-4">Data artifacts contain structured data:</p>
                <CodeBlock isMultiline={true}>{`// Creating a JSON data artifact
const dataArtifact = await agent.createArtifact({
  type: 'data',
  format: 'json',
  name: 'analysis-results',
  content: JSON.stringify({
    metrics: {
      accuracy: 0.95,
      precision: 0.92,
      recall: 0.89
    },
    timestamp: new Date().toISOString()
  }),
});`}</CodeBlock>
              </div>
            </section>

            <section className="mb-12" id="artifact-extensions">
              <h2 className="text-2xl font-bold mb-4 pb-2 border-b border-[#86868b]/10">Artifact Extensions</h2>
              <p className="mb-4">Artifact extensions allow you to add custom functionality to artifacts:</p>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Creating Extensions</h3>
                <p className="mb-4">You can create custom extensions to add functionality to artifacts:</p>
                <CodeBlock isMultiline={true}>{`// Example artifact extension
class VisualizationExtension {
  constructor(artifact) {
    this.artifact = artifact;
  }

  async generateChart() {
    // Logic to generate a chart from the artifact data
    const chartData = JSON.parse(this.artifact.content);
    // Generate and return chart
  }
}

// Register the extension
f4rmhouse.registerArtifactExtension('visualization', VisualizationExtension);`}</CodeBlock>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Using Extensions</h3>
                <p className="mb-4">Once registered, extensions can be used with artifacts:</p>
                <CodeBlock isMultiline={true}>{`// Using an artifact extension
const artifact = await agent.getArtifact('analysis-results');
const visualizer = await artifact.getExtension('visualization');
const chart = await visualizer.generateChart();

// The chart can now be used or displayed`}</CodeBlock>
              </div>
            </section>

            <section className="mb-12" id="artifact-sharing">
              <h2 className="text-2xl font-bold mb-4 pb-2 border-b border-[#86868b]/10">Sharing & Collaboration</h2>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Sharing Artifacts</h3>
                <p className="mb-4">Artifacts can be shared with other users or systems:</p>
                <ul className="list-disc pl-6 space-y-2">
                  <li>Generate shareable links</li>
                  <li>Set permissions for access control</li>
                  <li>Export artifacts to external systems</li>
                </ul>
                <CodeBlock isMultiline={true}>{`// Generating a shareable link for an artifact
const shareLink = await artifact.createShareLink({
  expiresIn: '7d',  // Link expires in 7 days
  permissions: 'read-only'
});

console.log(\`Share this link: \${shareLink.url}\`);`}</CodeBlock>
              </div>
              
              <div className="mb-6">
                <h3 className="text-lg font-semibold mb-2">Collaborative Editing</h3>
                <p className="mb-4">Some artifacts support collaborative editing:</p>
                <CodeBlock isMultiline={true}>{`// Enable collaborative editing on a document
await artifact.enableCollaboration({
  mode: 'realtime',
  allowedUsers: ['user1@example.com', 'user2@example.com'],
  notifyOnChanges: true
});`}</CodeBlock>
              </div>
            </section>

            <section id="best-practices">
              <h2 className="text-2xl font-bold mb-4 pb-2 border-b border-[#86868b]/10">Best Practices</h2>
              
              <div className="space-y-6">
                <div>
                  <h3 className="text-lg font-semibold mb-2">Naming Conventions</h3>
                  <p>Use clear, descriptive names for artifacts that indicate their content and purpose. Include version information when appropriate.</p>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-2">Metadata</h3>
                  <p>Always include relevant metadata with artifacts to provide context about their creation, purpose, and relationships to other artifacts.</p>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-2">Versioning</h3>
                  <p>Implement versioning for artifacts that may change over time to maintain a history of changes and allow for rollbacks if needed.</p>
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-2">Security</h3>
                  <p>Be mindful of security implications when sharing artifacts, especially those containing sensitive information. Use appropriate access controls and encryption.</p>
                </div>
              </div>
            </section>
          </div>
        </main>
      </div>
    </div>
  );
}
